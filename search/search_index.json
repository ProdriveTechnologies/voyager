{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Voyager","text":"<p>Package manager for C/C++ software.</p> <p>Voyager is an enterprise focused package manager for C and C++ that integrates with Artifactory:</p> <ul> <li>Integrates with Visual Studio (MSBuild) and CMake</li> <li>Host packages in your own network on your own server</li> <li>Works with the free Community Edition of Artifactory</li> <li>Easy to use, just call <code>voyager install</code> and then build your software the regular way</li> <li>Very simple package format, allowing easy packaging of existing software solutions (no need to overhaul your entire build system)</li> </ul> <p>The reason we've created voyager at Prodrive Technologies is that third-party options did not fit our workflow. We have a lot of existing software which would need significant changes to integrate with one of the existing package managers for C/C++.</p>"},{"location":"artifactory/","title":"Artifactory","text":"<p>Voyager packages are stored in Artifactory</p>"},{"location":"artifactory/#layout","title":"Layout","text":"<p>Voyager packages that are deployed must comply with the following path: <code>[repository]/[group]/[package]/[version]/[arch]/</code></p> Element Description repository The artifact repository, for example: <code>example-generic-local</code> group Group folder in the repository: <code>API</code>, <code>ThirdParty</code>, ... package Name of the package: <code>protoc</code>, <code>fmt</code>, ... version Version of the package, can be a semver number (x.y.z) or the name of a branch arch The architecture of the packages, see Architectures"},{"location":"artifactory/#architectures","title":"Architectures","text":"<p>The architecture indicates which platform the package has been made for. These are strings that are completely up to the end user. The table below provides some examples of architecture strings.</p> Key Description Windows MSVC.141.DBG.32 Visual Studio 2017 32bit Debug MSVC.142.DBG.32 Visual Studio 2019 32bit Debug MSVC.142.REL.32 Visual Studio 2019 32bit Release MSVC.143.DBG.32 Visual Studio 2022 32bit Debug MSVC.143.REL.32 Visual Studio 2022 32bit Release go.windows.amd64 Golang 64 bit windows Generic Windows Linux arm-xilinx-eabi-gcc-4.8.1 Arm GCC 4.8.1 arm-linux-gnueabi-gcc-7.2.1 Arm GCC 7.2.1 x86_64-linux-gnu-gcc-6 GCC 6 go.linux.amd64 Golang 64 bit Any platform Header Header-only packages Source Source packages"},{"location":"artifactory/#properties","title":"Properties","text":"<p>It is possible to add properties to an Artifact, these can be used to change the behavior of Voyager. The following properties are supported:</p> Name Description Value deprecated Indicate that the package is no longer recommended for use Warning message to display in Voyager"},{"location":"package-format/","title":"Package format","text":"<p>This chapter explains the package format of a voyager package</p>"},{"location":"package-format/#layout","title":"Layout","text":"<p>The standard layout of a voyager package looks like this. However this is fully modifiable through the voyager_package.json file. The only thing that is mandatory in a package is the voyager_package.json. <pre><code>voyager_package.tgz\n|-&gt;voyager_package.json\n|-&gt;Bin\n   |-&gt;MyLibrary.dll\n   |-&gt;MyLibrary.pdb\n|-&gt;Include\n   |-&gt;MyLibrary.h\n|-&gt;Lib\n   |-&gt;MyLibrary.lib\n|-&gt;Doc\n   |-&gt;Readme.html\n</code></pre></p>"},{"location":"package-format/#compression","title":"Compression","text":"<p>Packages are compressed using tar/gz, the extension is .tgz. To compress a package one can use the following Linux command: <code>tar -czvf voyager_package.tgz Bin Doc Include Lib voyager_package.json</code></p>"},{"location":"package-format/#voyager_packagejson","title":"voyager_package.json","text":""},{"location":"package-format/#overview","title":"Overview","text":"<p>This overview gives an idea of all the functionality in the package file. For a basic package only a few fields are needed. <pre><code>{\n\"version\": 2,\n\"bin\": [\"Bin\"],\n\"include\": [\"Include\"],\n\"lib\": [\"Lib\"],\n\"link\": [\"Library.R06.lib\"],\n\"definitions\": [],\n\"options\": [{\n\"key\": \"extended-header\",\n\"include\": [\"Include\", \"Include-Extended\"]\n}],\n\"dependencies\": [\n{\n\"repo\": \"example-generic-local\",\n\"library\": \"Interfaces/Standard\",\n\"version\": \"1.0\",\n\"options\": [],\n\"type\": \"compile\"\n}\n],\n\"linker_flags\": [\"/DEF:${package_abs_path}Lib\\\\Client.def\"]\n}\n</code></pre></p>"},{"location":"package-format/#root-elements","title":"Root elements","text":"Element Required Description version True The file format version, currently always 2 bin True* List of folders that contain the binaries include True* List of folders that contain the header files lib True* List of folders that contain the lib files link True* List of files to link to, files must be located in one of the <code>lib</code> directories compile False List of files to compile. definitions True* Preprocessor definitions to set options True* List of options that override other elements dependencies True* List of dependencies linker_flags False Additional linker flags, has support for template substitution * Element is required but can be an empty array <code>[]</code> when not needed"},{"location":"package-format/#options-elements","title":"Options elements","text":"Element Required Description key True The key of the option, this is what the user provides in the <code>options</code> field in voyager.json bin False Override the bin element include False Override the include element lib False Override the lib element link False Override the link element definitions False Override the definitions element"},{"location":"package-format/#dependencies-elements","title":"Dependencies elements","text":"Element Required Description repo True The Artifactory repository in which the dependency is located library True The dependency to install version True Version to install, may contain wildcards like <code>3.*</code> options False dependency specific options type False Dependency type for the package <code>compile</code> or <code>runtime</code>"},{"location":"package-format/#options","title":"Options","text":"<p>Options have the ability to override certain settings of the package. These options are completely package specific. Example use cases for options include:</p> <ul> <li>Adding an extra include path for a 'secret' header (Library.Extended.h)</li> <li>Modifying the link element to link to a static version of the library</li> </ul>"},{"location":"package-format/#template-substitutions","title":"Template substitutions","text":"<p>Some fields have support for template substitutions, these can be used if an absolute path is needed in a specific command. Available substitutions:</p> Key Substitution <code>${package_abs_path}</code> The full absolute path of the package folder ending with a /"},{"location":"release-notes/","title":"Release notes","text":""},{"location":"release-notes/#1164","title":"[1.16.4]","text":"<ul> <li>Use a persistent HTTP connection to make <code>voyager install</code> faster.</li> </ul>"},{"location":"release-notes/#1163","title":"[1.16.3]","text":"<ul> <li>Preserve symlinks during <code>voyager deploy</code>.</li> </ul>"},{"location":"release-notes/#1162","title":"[1.16.2]","text":"<ul> <li>Also deploy transitive runtime dependencies </li> </ul>"},{"location":"release-notes/#1161","title":"[1.16.1]","text":"<ul> <li>Change default install folder on Windows to <code>C:\\Program Files\\Prodrive\\voyager</code></li> <li>Add PATH variable now modifies the system PATH</li> </ul>"},{"location":"release-notes/#1160","title":"[1.16.0]","text":"<ul> <li><code>voyager login</code> now asks for the artifactory url and username</li> <li>Remove artifactory_url default value from config templates</li> <li>CMake and MSBuild generators now create a variable pointing to the <code>.voyager</code> directory.</li> <li>Add MSVC.143 to config_template Windows</li> <li>Implement plugin architecture</li> <li>Add generator for C++ header file with a list of installed packages</li> <li>Add missing docstrings so <code>voyager --help</code> is actually useful</li> <li>Add logging with the Python standard logging framework</li> <li>Add <code>voyager doc</code> command that hosts a local webserver linking to docs of packages</li> <li>Add <code>voyager check-update</code> command to find out which packages in voyager.json can be updated</li> <li>Add command line parameter to <code>voyager add</code> for force version</li> <li>Add command line parameter to <code>voyager deploy</code> to only deploy runtime dependencies</li> <li>Fix windows installer so updates can be installed without removing the old version first</li> </ul>"},{"location":"release-notes/#1150","title":"[1.15.0]","text":"<ul> <li>Add <code>voyager login</code> so no more copying of API key is needed</li> <li>Fix bug where recursive runtime dependencies were not downloaded</li> <li>The generated default config file on Linux now contains the correct architectures</li> <li>When an update is available, the download link is printed</li> </ul>"},{"location":"release-notes/#1140","title":"[1.14.0]","text":"<ul> <li>Add support for local packages through <code>local_path</code></li> <li>Add option <code>--with-runtime-deps</code> for <code>voyager install</code> to also download runtime dependencies</li> <li>Add <code>voyager deploy</code> that copies the contents of all bin paths to an output folder</li> </ul>"},{"location":"release-notes/#1130","title":"[1.13.0]","text":"<ul> <li>Add an update check that runs in the background of <code>voyager install</code></li> <li>Add command to check for updates <code>voyager check-update</code></li> <li>Add command to search for packages <code>voyager search</code></li> <li>Add command to add found packages to voyager.json <code>voyager add</code></li> <li>Fix bug where <code>output_dir</code> was placed in the package file</li> </ul>"},{"location":"release-notes/#1120","title":"[1.12.0]","text":"<ul> <li>Add option <code>force_version</code> to handle version conflicts</li> <li>Fix issue with including dependencies of a skipped package</li> <li>Fix typo in missing config file message and make message stand out better</li> </ul>"},{"location":"release-notes/#1110","title":"[1.11.0]","text":"<ul> <li>Add option <code>override_archs</code> for voyager.json to download a package that is a different arch then the host system.</li> <li>Add option <code>download_only</code> for downloading a package without including it.</li> <li>Update internal <code>_find_versions_for_package</code> function to use aql. Should give a good speed boost</li> </ul>"},{"location":"release-notes/#1103","title":"[1.10.3]","text":"<ul> <li>Fixed a bug introduced in version 1.10.2 where package already included in another project would not be added to the build info and thus not included by the generators. </li> </ul>"},{"location":"release-notes/#1102","title":"[1.10.2]","text":"<ul> <li>Fixed bug where version conflicts would not occur between projects in a solution or between top-level dependencies and project-level dependencies. This now correctly throws an <code>ERROR: Version conflict</code></li> </ul>"},{"location":"release-notes/#1101","title":"[1.10.1]","text":"<ul> <li>Added installer</li> </ul>"},{"location":"release-notes/#1100","title":"[1.10.0]","text":"<ul> <li>Add support for source packages.</li> </ul>"},{"location":"release-notes/#190","title":"[1.9.0]","text":"<ul> <li>Add support for output_dir to specify extraction directory per library</li> </ul>"},{"location":"release-notes/#180","title":"[1.8.0]","text":"<ul> <li>Add <code>for_archs</code> field in voyager.json to install package only for specific archs</li> </ul>"},{"location":"release-notes/#171","title":"[1.7.1]","text":"<ul> <li>Fixed bug <code>NameError: name 'build_tools' is not defined</code></li> </ul>"},{"location":"release-notes/#170","title":"[1.7.0]","text":"<ul> <li>Add support for cross compilation through build_tools and selectable host_platform</li> <li><code>voyager install</code> has now two optional commands: <code>--host</code> and <code>--host-file</code></li> <li>Add support for <code>build_tools</code> element in voyager.json</li> </ul>"},{"location":"release-notes/#161","title":"[1.6.1]","text":"<ul> <li>Fix bug where project files were not getting touched</li> </ul>"},{"location":"release-notes/#160","title":"[1.6.0]","text":"<ul> <li>Add support for linker_flags</li> <li>Fix bug for package names without a folder</li> <li>Change the download folder from <code>libs</code> to <code>.voyager</code></li> </ul>"},{"location":"release-notes/#150","title":"[1.5.0]","text":"<ul> <li>Add support for CMake to the <code>voyager install</code> command.</li> <li>Add a configuration option <code>generators</code> to the solution-level voyager file,   to choose the desired project file generators.</li> <li>Add generator for -I parameters for header checks</li> <li>Add deprecation warnings through Artifactory properties</li> <li>Fix the exception when a branch name was available in Artifactory but the user used a semver</li> </ul>"},{"location":"release-notes/#142","title":"[1.4.2]","text":"<ul> <li><code>voyager install</code> now touches the project files to force a Visual Studio reload</li> </ul>"},{"location":"release-notes/#141","title":"[1.4.1]","text":"<ul> <li><code>voyager package</code> now accepts non-semver versions as dependencies (with a warning)</li> </ul>"},{"location":"release-notes/#140","title":"[1.4.0]","text":"<ul> <li><code>voyager package</code> now expects an input file path and writes the output file in the same folder as the input file</li> </ul>"},{"location":"release-notes/#130","title":"[1.3.0]","text":"<ul> <li>Change environment variable names to the ones provided by the bamboo variables</li> <li><code>voyager config</code> now prints the location of the config file</li> <li>Add support for preprocessor definitions</li> </ul>"},{"location":"release-notes/#120","title":"[1.2.0]","text":"<ul> <li>Add <code>voyager package</code> command</li> </ul>"},{"location":"release-notes/#110","title":"[1.1.0]","text":"<ul> <li>Add support for environment variables to override config file</li> <li>Multiple projects with a top level solution can be made</li> <li>Compatible architectures can now be defined in the config file</li> <li>Dependencies are automatically downloaded</li> <li>The version number can be indicated via semver ranges</li> </ul>"},{"location":"release-notes/#100","title":"[1.0.0]","text":"<ul> <li>First release of concept</li> </ul>"},{"location":"advanced/ci-integration/","title":"CI Integration","text":"<p>Voyager needs to be configured with an API Key for Artifactory and information about which architectures to download. This is done through a config file. This is not very practical when running in a CI setup. To resolve this the config file is ignored when certain environment variables are set.</p>"},{"location":"advanced/ci-integration/#environment-variables","title":"Environment variables","text":"Variable Overrides Format bamboo_voyager_CI - <code>true</code> bamboo_voyager_CI_API_KEY api_key <code>\"API_KEY_HERE\"</code> bamboo_voyager_CI_URL artifactory_url <code>\"https://...\"</code> bamboo_voyager_CI_ARCH default_arch <code>\"arch1;arch2;arch3\"</code>"},{"location":"advanced/cross-compilation/","title":"Cross compilation","text":"<p>To support cross-compilation, voyager distinguishes between the build architecture and host architecture. The build architecture is that of the system voyager and the compiler run on. The host architecture is that of the system your build products will run on. This distinction is important when fetching build tools from voyager - they should always be packages for the build system.</p> <p>For the configuration file, this means that the <code>build_tools</code> dependencies are downloaded for the build architecture, while <code>libraries</code> dependencies are downloaded for the host architecture.</p> <p>The build architecture is defined by the <code>default_arch</code> field in the configuration file or the environment variables. When not explicitly defined, the host architecture defaults to the build architecture. The host architecture can be defined while running <code>voyager install</code>:</p> <pre><code>$ voyager install --host ARM.GCC.481\n$ voyager install --host-file Platforms/Windows-Platform.json\n</code></pre> <p>Windows-Platform.json: <pre><code>{\n\"version\": \"1\",\n\"host\": [\"MSVC.142.DBG.32\", \"MSVC.141.DBG.32\", \"MSVC.140.DBG.32\", \"go.windows.amd64\", \"windows\"]\n}\n</code></pre></p>"},{"location":"advanced/dependency-conflicts/","title":"Dependency conflicts","text":"<p>This page explains how to use the <code>force_version</code> keyword to handle dependency conflicts.</p>"},{"location":"advanced/dependency-conflicts/#when","title":"When","text":"<p>Conflicts occur when a voyager package requires a different version of an already included package. For example: <code>Exceptions</code> requires <code>fmt</code> 6.2 and BitFields requires <code>fmt</code> 6.0.  To reproduce this you can use the following json: <pre><code>[{\n\"repo\": \"example-generic-local\",\n\"library\": \"Utils/Exceptions\",\n\"version\": \"1.2\"\n},\n{\n\"repo\": \"example-generic-local\",\n\"library\": \"Utils/BitFields\",\n\"version\": \"1.1\"\n}]\n</code></pre> Which will result in the following error: <pre><code>+-- Downloading Utils/Exceptions @ 1.2 ... MSVC.142.DBG.32 @ 1.2.0 OK\n|   +- Downloading ThirdParty/fmt @ 6.2 ... MSVC.142.DBG.32 @ 6.2.0 OK\n+-- Downloading Utils/BitFields @ 1.1 ... Header @ 1.1.0 OK\n|   +- Downloading ThirdParty/fmt @ 6.0 ... ERROR: Version conflict within project for ThirdParty/fmt: 6.2.0 vs 6.0.0\n</code></pre></p>"},{"location":"advanced/dependency-conflicts/#how-to-resolve","title":"How to resolve","text":"<p><code>force_version</code> can be used to force the usage of a specific version of a package. To resolve conflicts in the above example change the voyager.json to this: <pre><code>[{\n\"repo\": \"example-generic-local\",\n\"library\": \"ThirdParty/fmt\",\n\"version\": \"6.2\",\n\"force_version\": true\n},\n{\n\"repo\": \"example-generic-local\",\n\"library\": \"Utils/Exceptions\",\n\"version\": \"1.2\"\n},\n{\n\"repo\": \"example-generic-local\",\n\"library\": \"Utils/BitFields\",\n\"version\": \"1.1\"\n}]\n</code></pre> Now fmt will be downloaded first and the force_version flag is saved.  All other packages that require fmt will now be forced to use fmt 6.2 <pre><code>+-- Downloading ThirdParty/fmt @ 6.2 ... MSVC.142.DBG.32 @ 6.2.0 (Force Version) OK\n+-- Downloading Utils/Exceptions @ 1.2 ... MSVC.142.DBG.32 @ 1.2.0 OK\n|   +- Downloading ThirdParty/fmt @ 6.2 ... SKIP: package already included in project\n+-- Downloading Utils/BitFields @ 1.1 ... Header @ 1.1.0 OK\n|   +- Downloading ThirdParty/fmt @ 6.0 ... WARN: Forcing version 6.0.0 to 6.2.0 SKIP: package already included in project\n</code></pre></p>"},{"location":"advanced/dependency-conflicts/#rules","title":"Rules","text":"<ul> <li>You can only use force_version to force to a higher version. Otherwise an error is thrown: <code>ERROR: Cannot force 6.2.0 to lower version 6.0.0</code></li> <li>You can always use force_version on non semver versions like branch names</li> <li>It is forbidden to have a force_version attribute in the voyager_package.json, it will be removed when <code>voyager package</code> is called</li> <li>Using force version can lead to unexpected behavior regarding ABI compatibility</li> <li>Libraries with force_version should be defined in the voyager.json before they're downloaded through a dependency</li> </ul>"},{"location":"advanced/overlay-file/","title":"Overlay file","text":"<p>The overlay file is made to override and add elements to a voyager.json file without modifying that file. The overlay file should only exist locally on the machine of the developer. Don't commit it in git.</p>"},{"location":"advanced/overlay-file/#example-use-case","title":"Example use case","text":"<p>When developing a new package it might be useful to test if the package is working. Therefore you might want to reference it locally without using Artifactory. This is possible by using an overlay file with a <code>local_path</code> element.</p> <p>voyager.json <pre><code>{\n\"version\": 1,\n\"type\": \"solution\",\n\"build_tools\": [\n],\n\"libraries\": [\n{\n\"repo\": \"example-generic-local\",\n\"library\": \"WowALocalPackage\",\n\"version\": \"500.0.0\"\n}\n],\n\"projects\": [\"Implementation\"],\n\"generators\": [\"msbuild\"]\n}\n</code></pre></p> <p>voyager.overlay.json <pre><code>{\n\"version\": 1,\n\"type\": \"overlay\",\n\"build_tools\": [],\n\"libraries\": [\n{\n\"repo\": \"example-generic-local\",\n\"library\": \"WowALocalPackage\",\n\"local_path\": \"..\\\\WowALocalPackage\\\\Debug\\\\voyager_package\"\n}\n]\n}\n</code></pre></p> <p>voyager install output <pre><code>Overlay file active\nTop level:\n+-- Downloading WowALocalPackage @ 500.0.0 ... Overlay Local OK\n|   +- Downloading Interfaces/Report @ 2.0 ... Header @ 2.0.0 OK\n|   +- Downloading Interfaces/Jtag @ 1.0 ... Header @ 1.0.0 OK\n</code></pre></p>"},{"location":"getting-started/command-reference/","title":"Command reference","text":"<p>This chapter explains the commands that are available within voyager.</p>"},{"location":"getting-started/command-reference/#install","title":"Install","text":"<p>To use voyager for a project that already contains voyager.json files, run <code>voyager install</code> in the top level directory. This should install all the dependencies. If you want to download the runtime transitive dependencies as well, run <code>voyager install --with-runtime-deps</code> or shorter: <code>voyager install -wrd</code>.</p>"},{"location":"getting-started/command-reference/#search","title":"Search","text":"<p>You can search for packages by running <code>voyager search</code> with your query. A few example queries:</p> <ul> <li><code>voyager search Interfaces/D*</code> Search for interfaces that start with a <code>D</code></li> <li><code>voyager search ASD.*</code> Search for anything starting with ASD.</li> <li><code>voyager search P?.Xyz*</code> Search for Xyz in P?</li> </ul> <p>Example output: <pre><code>&gt;voyager search Jtag*\nVoyager version 1.13.0\nexample-generic-local/API/JtagProgrammer/19.0.2 ['18.0.0', '17.0.0', '19.0.0', '19.0.1', '19.0.2']\nexample-generic-local/API/Jtag/13.0.0 ['13.0.0']\n</code></pre> The first string of the search result can be copied and pasted in to the argument of the <code>voyager add</code> function.</p>"},{"location":"getting-started/command-reference/#add","title":"Add","text":"<p>You can add packages by running <code>voyager add</code> with a string of the package you want to add. This package is then added in the voyager.json in the current working directory. The optional <code>--force-version</code> argument can be passed to add  <code>\"force_version\": \"true\"</code> to the json entry. Example: <pre><code>&gt;voyager add example-generic-local/API/JtagProgrammer/19.0.2\nVoyager version 1.13.0\nAdding Library:\n  Repo:    example-generic-local\n  Library: API/JtagProgrammer\n  Version: 19.0\n</code></pre></p>"},{"location":"getting-started/command-reference/#deploy","title":"Deploy","text":"<p>To copy all the downloaded binaries (dll, so, exe) to a single directory, <code>voyager deploy</code> can be used. By default it will copy all the binaries to <code>.voyager/.deploy</code>, but the option <code>--dir</code> can be used to select a different directory. The option <code>--only-runtime-deps</code> will limit the copy to only packages that are marked with the entry <code>\"dependency_type\": \"runtime\"</code>. For example to copy all binaries to the Debug folder, use <code>voyager deploy --dir Debug</code>.</p>"},{"location":"getting-started/command-reference/#check-update","title":"Check update","text":"<p>Find out which packages can be updated in the voyager.json. Example: <pre><code>&gt;voyager check-update\nVoyager version 1.16.0\nPatch Update Backwards-compatible bug fixes.\n Tools/FillTemplate                      3.2.2 -&gt; 3.2.5      \"version\": \"3.2\"\n\nMinor Update New backwards-compatible features.\n Utils/Exceptions                        1.1.2 -&gt; 1.2.5      \"version\": \"1.2\"\n\nMajor Update Potentially breaking API changes, use caution.\n API/I2c                                 7.0.0 -&gt; 8.0.0      \"version\": \"8.0\"\n</code></pre></p>"},{"location":"getting-started/command-reference/#doc","title":"Doc","text":"<p>Run <code>voyager doc</code> to start a local webserver that shows a listing of all the packages that contain a <code>Doc/Readme.html</code> file</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Voyager works together with Artifactory. Connecting to an Artifactory instance can be done with the <code>voyager login</code> command.</p> <ol> <li>Open a shell and run <code>voyager config</code> to generate the default config file</li> <li>Run <code>voyager login</code> and follow the on screen instructions</li> <li>Run <code>voyager config</code> again to view the contents of the config file</li> </ol> <p>Example output: <pre><code>Voyager version 1.15.0\nLogin and get Artifactory API key for config file\nPlease enter the artifactory url: https://artifactory.example.com/ui/packages\nUser [someuser]:\nPassword for someuser:\nConnecting as someuser to https://artifactory.example.com/artifactory continue? [y/N]: y\nRequesting API Key\nSaving API key: .... to config file\n</code></pre></p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#windows","title":"Windows","text":"<p>For Windows we provide standard installers that will install voyager into AppData and set up your <code>PATH</code> variable.</p> <ol> <li>Uninstall previous versions of voyager first</li> <li>Download the latest version of the installer from the releases page.</li> <li>Run the installer</li> <li>Go to the next page to view the instructions for connecting to your Artifactory instance</li> </ol>"},{"location":"getting-started/installation/#git-bash","title":"Git bash","text":"<p>If you're planning to use voyager within git bash it is needed to run through winpty.  Otherwise <code>voyager login</code> and text highlighting don't work. Please run the following code to add an alias to your <code>.bashrc</code> file: <pre><code>echo \"alias voyager='winpty voyager'\" &gt;&gt; ~/.bashrc\n</code></pre></p>"},{"location":"getting-started/installation/#linux","title":"Linux","text":"<p>For Linux we provide compiled executables with pyinstaller. If there is a system mismatch you may need to build voyager yourself. For installation in Linux run the following commands in the shell</p> <ol> <li><code>mkdir -p ~/voyager</code></li> <li><code>cd ~/voyager</code></li> <li>Download voyager into this folder</li> <li><code>chmod +x ./voyager</code></li> <li><code>echo \"export PATH=\\$PATH:$(pwd)\" &gt;&gt; ~/.profile</code></li> <li>Go to the next page to view the instructions for connecting to your Artifactory instance</li> </ol>"},{"location":"getting-started/installation/#building-from-scratch","title":"Building from scratch","text":"<p>In case your platform does not match any of the provided binaries it is easy to build voyager into an executable. For all the python commands below it is assumed that Python 3.7 is used.</p> <ol> <li>Clone the repository</li> <li><code>python -m venv env</code></li> <li>Activate the virtual env</li> <li><code>pip install -r requirements.txt</code></li> <li><code>pyinstaller deploy/voyager_onefile.spec</code></li> <li>The onefile executable can be slow on Windows, it that's the case try <code>pyinstaller deploy/voyager.spec</code></li> <li>Executables can be found in the dist folder</li> </ol>"},{"location":"getting-started/voyager-json/","title":"Voyager.json","text":"<p>The voyager.json is the file that is placed in the solution and projects folder and lists all the dependencies.</p>"},{"location":"getting-started/voyager-json/#overview","title":"Overview","text":"<pre><code>{\n\"version\": 1,\n\"type\": \"solution\",\n\"build_tools\": [\n{\n\"repo\": \"example-generic-local\",\n\"library\": \"Tools/TemplateSubstituter\",\n\"version\": \"3.*\"\n},\n{\n\"repo\": \"example-generic-local\",\n\"library\": \"Tools/cmake-toolchains\",\n\"version\": \"1\",\n\"output_dir\": \".voyager/cmake-toolchains\"\n},\n{\n\"repo\": \"example-generic-local\",\n\"library\": \"Tools/cmake-utils\",\n\"version\": \"1\",\n\"output_dir\": \".voyager/cmake-utils\"\n}\n],\n\"libraries\": [\n{\n\"repo\": \"example-generic-local\",\n\"library\": \"API/ExampleLibrary\",\n\"version\": \"8.*\",\n},\n{\n\"repo\": \"example-generic-local\",\n\"library\": \"API/JtagProgrammer\",\n\"version\": \"6.0\",\n\"options\": [\"extended-header\"],\n\"dependency_type\": \"runtime\",\n\"for_archs\": [\"MSVC.142.DBG.32\"],\n\"force_version\": true\n},\n{\n\"repo\": \"example-generic-local\",\n\"library\": \"API/SwdProgrammer\",\n\"version\": \"*\",\n\"override_archs\": [\"arm-xilinx-eabi-gcc-4.8.1\"],\n\"download_only\": true,\n\"output_dir\": \".voyager/SwdProgrammer\"\n}\n],\n\"projects\": [\"Implementation\", \"Qualification\"],\n\"generators\": [\"msbuild\", \"cmake\"]\n}\n</code></pre>"},{"location":"getting-started/voyager-json/#root-elements","title":"Root elements","text":"Element Required Description version True The file format version, currently always 1 type True The type of the file: <code>solution</code> or <code>project</code> build_tools False List of packages to install that provide build tools. libraries True List of packages to install that provide libraries, can be empty array <code>[]</code> for no packages projects When <code>type:solution</code> List of the subdirectories with voyager.json files where the type is <code>project</code> generators False At solution level: Which build systems to generate files for. Defaults to <code>[\"msbuild\"]</code>."},{"location":"getting-started/voyager-json/#libraries-build-tools-elements","title":"Libraries &amp; build tools elements","text":"Element Required Description repo True The Artifactory repository in which the package is located library True The package to install version True Version to install, may contain wildcards like <code>3.*</code> options False Package specific options, more about this in the Package format dependency_type False Dependency type for the package <code>compile</code> or <code>runtime</code>, more about this in voyager_package.json for_archs False Only install this package when installing for one of the architectures in this list output_dir False Override the default output directory for the package. Can be useful if the build system has to make assumptions on the path override_archs False Override the arch for a package, install the specified arch. download_only False Only download this package, dont include the package and dont download dependencies. force_version False Force this version when a dependency conflict occurs. See Dependency Conflicts for more information local_path False Use a local package instead of downloading from Artifactory. Can be a relative or absolute path. Better to use this via the Overlay file"},{"location":"getting-started/voyager-json/#solution-vs-project","title":"Solution vs Project","text":"<p>The voyager.json has two types: <code>solution</code> and <code>project</code>. When a solution contains a single project a single voyager.json with the project type is enough. A solution with multiple projects requires a voyager file for each project and a top level at the solution.</p> <p>With a voyager solution, the solution file contains dependencies that are required for both projects. On top of that each project can have it's own dependencies. <pre><code>MyProject\n|-&gt;voyager.json (solution)\n|-&gt;MyProject.sln\n|-&gt;Implementation\n   |-&gt;Implementation.vcxproj\n   |-&gt;voyager.json (project)\n   |-&gt;voyager.props (generated)\n|-&gt;Qualification\n   |-&gt;Qualification.vcxproj\n   |-&gt;voyager.json (project)\n   |-&gt;voyager.props (generated)\n</code></pre></p>"},{"location":"getting-started/voyager-json/#generators","title":"Generators","text":"<p>Voyager supports multiple generators depending on what you're trying to build. The default generator (if none are provided) is \"msbuild\".</p> Name Description msbuild Generates .props files to add to MSBuild projects. cmake Generates .cmake files with INTERFACE libraries for each package for the CMake build system. packagelist Generates a <code>voyager.h</code> with a name \u2192 version map of all dependencies."},{"location":"integrations/cmake/","title":"CMake","text":"<p>The CMake generator creates files to include in your own <code>CMakeLists.txt</code> to load voyager dependencies. The generator requires CMake 3.13 or higher.</p>"},{"location":"integrations/cmake/#usage","title":"Usage","text":"<p><code>CMakeLists.txt</code>: <pre><code>project(Library)\ninclude(voyager_solution.cmake)\n</code></pre></p> <p><code>Qualification/CMakeLists.txt</code>: <pre><code>add_executable(Qualification)\ninclude(voyager.cmake)\ntarget_add_voyager(Qualification)\n</code></pre></p>"},{"location":"integrations/cmake/#generated-files","title":"Generated files","text":"<p>Voyager generates three sets of files to include packages in your CMake project: package files, a solution file, and project dependency files.</p>"},{"location":"integrations/cmake/#package-files","title":"Package files","text":"<p>For each voyager package, a <code>CMakeLists.txt</code> is generated that defines a new target with the package's components (libraries, headers, and so on) as its dependencies. The name of this target includes the path to the package and its version, for example <code>ThirdParty-fmt-6.0.0</code>.</p>"},{"location":"integrations/cmake/#solution-file","title":"Solution file","text":"<p>In the top-level of your project (the \"solution\" level, in Visual Studio terms) a single file <code>voyager_solution.cmake</code> is generated. This file adds all voyager packages as CMake subdirectories, allowing other projects to refer to the targets defined for each package. In your top-level <code>CMakeLists.txt</code>, add <code>include(voyager.cmake)</code> before any other <code>add_subdirectory</code> commands to make them available to your subprojects.</p> <p>The <code>voyager_solution.cmake</code> file also adds a variable pointing to the <code>.voyager</code> directory. This can be useful to point to a build tool inside the <code>.voyager</code> directory for example.</p>"},{"location":"integrations/cmake/#project-dependency-files","title":"Project dependency files","text":"<p>In each of your sub-projects, a file <code>voyager.cmake</code> is generated. This module defines a function <code>target_add_voyager(&lt;target&gt;)</code>, which adds all dependencies for that subproject to the specified target. Include <code>voyager.cmake</code> and call that function on your target, and you're good to go.</p>"},{"location":"integrations/msbuild/","title":"MSBuild","text":"<p>MSBuild integration is done through a Visual Studio project properties file (voyager.props). This file contains all the include paths, lib paths, flags, etc. for the project. Each voyager project creates it's own .props file that has to be included in Visual Studio.</p>"},{"location":"integrations/msbuild/#add-props-file-to-build","title":"Add props file to build","text":"<p>In case the project is not yet configured for voyager the user must add the props file to the project.</p> <p>Go to your Visual Studio project, and open the Property Manager (usually in View -&gt; Other Windows -&gt; Property Manager). Highlight the project to which the props file has to be added. Click the + icon and select the generated <code>voyager.props</code> file.</p>"},{"location":"integrations/msbuild/#project-not-loading","title":"Project not loading","text":"<p>When a user forgets to run <code>voyager install</code>, Visual Studio won't load the project because the .props file is missing. This can be fixed by adding a condition to the Import in the .vcxproj file: <code>&lt;Import Project=\"voyager.props\" Condition=\"exists('voyager.props')\" /&gt;</code></p>"}]}